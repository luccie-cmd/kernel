/*
 * Copyright (c) - All Rights Reserved.
 *
 * See the LICENSE file for more information.
 */

#if !defined(_STL_VECTOR_) && !_GLIBCXX_HOSTED
#define _STL_VECTOR_
#include <cstddef>
#include <common/dbg/dbg.h>

namespace std{
template<typename _T>
class vector{
    private:
        _T* _data;
        size_t _size;
        size_t _capacity;
    public:
        vector(){
            dbg::addTrace(__PRETTY_FUNCTION__);
            _data = new _T[1];
            _size = 0;
            _capacity = 1;
            dbg::popTrace();
        }
        vector(size_t size){
            dbg::addTrace(__PRETTY_FUNCTION__);
            _size = size;
            _data = new _T[size];
            _capacity = size;
            dbg::popTrace();
        }
        vector(const vector& other) {
            dbg::addTrace(__PRETTY_FUNCTION__);
            _size = other._size;
            _capacity = other._capacity;
            _data = new _T[_capacity];
            for (size_t i = 0; i < _size; i++) {
                _data[i] = other._data[i];
            }
            dbg::popTrace();
        }

        vector& operator=(const vector& other) {
            dbg::addTrace(__PRETTY_FUNCTION__);
            if (this != &other) {
                delete[] _data;  // Release the current memory
                _size = other._size;
                _capacity = other._capacity;
                _data = new _T[_capacity];
                for (size_t i = 0; i < _size; i++) {
                    _data[i] = other._data[i];
                }
            }
            dbg::popTrace();
            return *this;
        }
        ~vector(){
            delete[] _data;
        }
        void push_back(_T value){
            dbg::addTrace(__PRETTY_FUNCTION__);
            if(_size >= _capacity){
                _capacity*=2;
                _T* temp = new _T[_capacity];
                for(size_t i = 0; i < _size; i++){
                    temp[i] = _data[i];
                }
                delete[] _data;
                _data = temp;
            }
            _data[_size++] = value;
            dbg::popTrace();
        }
        size_t count(){
            return _size;
        }
        void pop_back(){
            dbg::addTrace(__PRETTY_FUNCTION__);
            _size--;
            dbg::popTrace();
        }
        void clear(){
            dbg::addTrace(__PRETTY_FUNCTION__);
            if(_data){
                delete[] _data;
            }
            _size = 0;
            _capacity = 1;
            _data = new _T[1];
            dbg::popTrace();
        }
        _T* begin(){
            return &_data[0];
        }
        _T* end(){
            return &_data[_size];
        }
        _T at(size_t idx){
            return _data[idx];
        }
};
};

#endif // _STL_VECTOR_
